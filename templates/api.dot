module AWS.{{= it.mod }}
    exposing
        ( {{= it.operations.map(op => op.name).join('\n        , ')}}
        , {{= it.types.filter(t => t.exposeAs).map(t => t.exposeAs).join('\n        , ')}}
        )

{-| {{= it.documentation }}

## Table of Contents

* [Operations](#operations){{~ it.categories :c }}
* [{{= c.name }}s](#{{= c.key }}s){{~}}

## Operations

{{~ it.operations.map(op => op.name) :name }}* [{{= name }}](#{{= name }})
{{~}}

@docs {{= it.operations.map(op => op.name).join(',') }}
{{~ it.categories :c }}
## {{= c.name }}s

@docs {{= c.types.filter(t => t.exposeAs).map(t => t.name).join(',') }}
{{~}}
-}

import Http
import Json.Decode as JD
import Json.Decode.Pipeline as JDP
{{~ it.extraImports :importExtra }}{{= importExtra }}
{{~}}

-- OPERATIONS
{{~ it.operations :op }}

{-| {{= op.doc }}
-}
{{= op.name }} : Http.Request {{= op.output.type }}
{{= op.name }} =
    Http.request
        { method = "{{= op.http.method }}"
        , headers = []
        , url = "{{= op.http.requestUri }}"
        , body = Http.emptyBody
        , expect = Http.expectJson {{= op.output.decoder }}
        , timeout = Nothing
        , withCredentials = False
        }
{{~}}

{{~ it.types.filter(t => t.exposeAs) :t }}
{{= t.typeDef }}


{{= t.decoderDef }}

{{~}}
